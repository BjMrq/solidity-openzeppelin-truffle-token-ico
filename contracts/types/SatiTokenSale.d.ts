/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SatiTokenSaleContract
  extends Truffle.Contract<SatiTokenSaleInstance> {
  "new"(
    _rate: number | BN | string,
    _wallet: string,
    _token: string,
    _kycValidation: string,
    meta?: Truffle.TransactionDetails
  ): Promise<SatiTokenSaleInstance>;
}

export interface TokensPurchased {
  name: "TokensPurchased";
  args: {
    purchaser: string;
    beneficiary: string;
    value: BN;
    amount: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

type AllEvents = TokensPurchased;

export interface SatiTokenSaleInstance extends Truffle.ContractInstance {
  /**
   * low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.
   * @param beneficiary Recipient of the token purchase
   */
  buyTokens: {
    (beneficiary: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      beneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      beneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      beneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   */
  rate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   */
  token(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   */
  wallet(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   */
  weiRaised(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    /**
     * low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.
     * @param beneficiary Recipient of the token purchase
     */
    buyTokens: {
      (beneficiary: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        beneficiary: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        beneficiary: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        beneficiary: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     */
    rate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    /**
     */
    token(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     */
    wallet(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     */
    weiRaised(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
